# This workflow claims an IP address range with the IPAM function for a new VNet 

name: IPAM-Claim-Address

on:
  push:
    branches: [ none ]
  workflow_dispatch:
    inputs:
      cgzoneid:
        description: 'Customer group landing zone ID'
        required: true
        default: 'p001cga'
      subid:
        description: 'Azure subscription for deployment of resources'
        required: true
        default: 'Azure Landing Zone'
      regionname:
        description: 'Azure region for deployment of resources'
        required: true
        default: 'uksouth'
      networksize:
        description: 'VNet size - Small/Medium/Large'
        required: true
        default: 'Small'

jobs:
  claim-address:
    runs-on: self-hosted
    steps:
      - name: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v2
      
      - name: Log on to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
          
      - name: Invoke IPAM function to claim an address space
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $cgZoneId = '${{ github.event.inputs.cgzoneid }}'
            $subId = '${{ github.event.inputs.subid }}'
            $regionName = '${{ github.event.inputs.regionname }}'
            $networkSize = '${{ github.event.inputs.networksize }}'
            $rgName = "rg-$cgZoneId-$regionName-network"
            $vnetName = "vnet-$cgZoneId-$regionName-01"
            
            Set-AzContext -Subscription $subId
            $subName = (Get-AzContext).Subscription.Name

            If ((Get-AzVirtualNetwork -name $vnetName) -eq $null) {
              Write-Host "VNet $vnetName does not already exist in subscription $subName"
              $uri = 'https://fa-hmrc-uksouth-ipam.azurewebsites.net/api/RegisterAddressSpace?code=Hr/67gZN4HfphbWcySO7Ev5UyyNjUL0vPD/vaajTydAyl3grVGMuyA=='
              $body = @{
                'InputObject' = @{
                  'ResourceGroup' = $rgName
                  'VirtualNetworkName' = $vnetName
                }
              } | ConvertTo-Json
              $params = @{
                    'Uri'         = $uri
                    'Method'      = 'POST'
                    'ContentType' = 'application/json'
                    'Body'        = $Body
              }
              $Result = Invoke-RestMethod @params
              $networkAddress = $Result.NetworkAddress
              
              $vnetOctet1 = $networkAddress.Split(".")[0]
              $vnetOctet2 = $networkAddress.Split(".")[1]
              $vnetOctet3 = $networkAddress.Split(".")[2]

              if ($networkSize -eq 'Small') {
                  $snetWeb = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".0/25"
                  $snetApp = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".128/25"
                  $snetDb = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".0/25"
                  $snetCgTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".128/26"
                  $snetEcsTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".192/26"
              }
              else {
                  $snetWeb = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".0/24"
                  $snetApp = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".0/24"
                  $snetDb = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 2).ToString() + ".0/24"
                  $snetCgTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 3).ToString() + ".0/25"
                  $snetEcsTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 3).ToString() + ".128/25"
              }

              Write-Host "Creating VNet $vnetName in resource group $rgName with network address $networkAddress"
              New-AzDeployment -Name $cgZoneId$regionName -Location $regionName -TemplateFile ./src/elz/elz.bicep `
              -cgZoneId $cgZoneId `
              -regionName $regionName `
              -vnetAdress $networkAddress `
              -snetWeb $snetWeb `
              -snetApp $snetApp `
              -snetDb $snetDb `
              -snetCgTool $snetCgTool `
              -snetEcsTool $snetEcsTool
            }
            Else {
              Write-Host "VNet $vnetName already exists in subscription $subName"
            }
            Start-Sleep 30
            Write-Host "Updating storage table"
            $uri = 'https://fa-hmrc-uksouth-ipam.azurewebsites.net/api/UpdateAddressSpace?code=mD9I0qm1PETB1zj3WkSDRoyxemmoWzTty8/YAi6FAShOilx4NaEwnA=='
            $params = @{
                  'Uri'         = $uri
                  'Method'      = 'GET'
            }
            $Result = Invoke-RestMethod @params
          azPSVersion: latest 
