# This workflow deploys the LZIM Azure Function

name: Deploy-LZIM

on:
  push:
    branches: [ none ]
  workflow_dispatch:

jobs:
  build-and-deploy-azurefunction:
    runs-on: windows-latest
    steps:
      - name: Check out repository under $GITHUB_WORKSPACE, so job can access it
        uses: actions/checkout@v2

      - name: Log on to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          
      - name: Create Function App
        uses: azure/powershell@v1
        with:
          inlineScript: |           
            $mgmtSubName = "mp0004"
            $regionName = "uksouth"
            $regionId = "uks"
            $functionZipPath = "./src/infra/lzim/lzim.zip"
            $aseDeploy = $false
            
            $aseVnetName = "vnet-$mgmtSubName-$regionId-01"
            $aseVnetAddress = "10.50.0.0/16"
            $aseSnetName = 'snet-lzim'
            $aseSnetAddress = "10.50.10.0/24"

            $faName = "fa-$mgmtSubName-$regionId-lzim"
            $rgLzimName = "rg-$mgmtSubName-$regionId-lzim"
            $rgMonitorName = "rg-$mgmtSubName-$regionId-monitor"

            Write-Output "Generating function zip file"
            Compress-Archive -Path ./src/infra/lzim/function/* -DestinationPath $functionZipPath -Force
            
            Write-Output "Deploying Azure resources"
            $deploymentName = Get-Date -Format yyyyMMddHHmmss
            $deploymentName
            New-AzDeployment -Name $deploymentName -Location $regionName -Verbose -TemplateFile ./elz/src/build/lzim/lzim.bicep `
                -regionName $regionName -regionId $regionId -mgmtSubName $mgmtSubName -rgLzimName $rgLzimName -rgMonitorName $rgMonitorName `
                -aseDeploy $aseDeploy -aseVnetName $aseVnetName -aseVnetAddress $aseVnetAddress -aseSnetName $aseSnetName -aseSnetAddress $aseSnetAddress
            Start-Sleep 60
            
            Write-Output "Publishing function to function app"
            $faObj = Get-AzWebApp -Name $faName -ResourceGroupName $rgLzimName
            Publish-AzWebApp -WebApp $faObj -ArchivePath $functionZipPath -Force
            Start-Sleep 30
            
            Write-Output "Configuring app settings"
            $saName = (Get-AzStorageAccount -ResourceGroupName $rgLzimName | Where-Object {$_.StorageAccountName -like 'st*lzim'}).StorageAccountName
            $appSettingsOld = ($faObj.SiteConfig.AppSettings | ForEach-Object { $h = @{} } { $h[$_.Name] = $_.Value } { $h })
            $appSettingsNew = @{lzStorageAccount = $saName}
            Set-AzWebApp -ResourceGroupName $rgLzimName -Name $faName -AppSettings ($appSettingsOld + $appSettingsNew)
            Start-Sleep 10
            
            Restart-AzWebApp -ResourceGroupName $rgLzimName -Name $faName

            Write-Output "Assigning Contributor role for the function app to the storage account"
            $saName = (Get-AzStorageAccount -ResourceGroupName $rgLzimName | Where-Object {$_.StorageAccountName -like 'st*lzim'}).StorageAccountName
            New-AzRoleAssignment -ResourceGroupName $rgLzimName -ResourceName $saName -RoleDefinitionName 'Contributor' -ObjectId $faObj.Identity.PrincipalId -ResourceType 'Microsoft.Storage/storageAccounts'  
          azPSVersion: latest 
