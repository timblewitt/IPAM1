# This workflow deploys Enterprise Landing Zone resources.
# It claims an IP address range with the IPAM function for a new VNet 

name: Deploy-ELZ

on:
  push:
    branches: [ none ]
  workflow_dispatch:
      inputs:
        cgsubname:
          type: string
          description: 'Landing zone subscription name'
          required: true
          default: 'p001cga'
        regionname:
          type: choice
          description: 'Azure region for deployment of resources'
          required: true
          default: 'uksouth'
          options:
            - "uksouth"
            - "ukwest"
        networksize:
          type: choice
          description: 'Virtual network (VNet) size - S/M/L'
          required: true
          default: 'small'
          options:
            - "small"
            - "medium"
            - "large"

jobs:
  deploy-elz:
    runs-on: windows-latest #self-hosted
    steps:
      - name: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v2
      
      - name: Log on to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
          
      - name: Deploy ELZ Management Resources
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $elzSubName = '${{ github.event.inputs.cgsubname }}'
            $elzRegionName = '${{ github.event.inputs.regionname }}'  

            switch ($elzRegionName) {
              "uksouth" {$elzRegionId = 'uks'}
              "ukwest" {$elzRegionId = 'ukw'}
            }
            $elzManagementRg = "rg-$elzSubName-$elzRegionId-management"

            $subName = 'Azure Landing Zone'  # Temporary for testing 
            #$subName = $elzSubName
            $subId = (Set-AzContext -SubscriptionName $subName).Subscription.Id

            Write-Host "Deploying landing zone management resources"
            $deploymentName = Get-Date -Format yyyyMMddHHmmss
            New-AzDeployment -Name $deploymentName -Location $elzRegionName -Verbose -TemplateFile ./elz/src/build/elz/elz.bicep `
                -elzSubName $elzSubName `
                -elzRegionId $elzRegionId `
                -elzRegionName $elzRegionName `
                -elzManagementRg $elzManagementRg
          azPSVersion: latest 

      - name: Deploy ELZ Network Resources
        uses: azure/powershell@v1
        with:
          inlineScript: |            
            $elzSubName = '${{ github.event.inputs.cgsubname }}'
            $elzRegionName = '${{ github.event.inputs.regionname }}'  
            $elzVnetSize  = '${{ github.event.inputs.networksize }}'  

            switch ($elzRegionName) {
              "uksouth" {$elzRegionId = 'uks'}
              "ukwest" {$elzRegionId = 'ukw'}
            }

            $connSubName = 'p001con'  # Name of connectivity (network) subscription
            $connRegionId = 'uks'  # Region identifier used in naming central network resources
            $ase = $false  # IPAM function deployed to an Application Service Environment ($true/$false)

            #$nwPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyDefinitions/deploy_allowed_products_networks'
            $nwPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyDefinitions/69ad827b-4c75-452c-ab75-f661eb61c389'
            #$mgPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyAssignments/products_assignment'
            $mgPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyAssignments/7da6a1d5c309442bb84d1fcc'
            $elzVnetName = "vnet-$elzSubName-$elzRegionId-01"
            $elzVnetRg = "rg-$elzSubName-$elzRegionId-network"
            $elzManagementRg = "rg-$elzSubName-$elzRegionId-management"
            $elzNsgRg = "rg-$elzSubName-$elzRegionId-nsg"

            $faIpamName = "fa-$connSubName-$connRegionId-ipam"
            $faIpamRg = "rg-$connSubName-$connRegionId-ipam"

            $subName = 'Azure Landing Zone'  # Temporary for testing 
            #$subName = $elzSubName
            Set-AzContext -SubscriptionName $subName

            $networkSuffix = '23'  # Small network by default
            if ($elzVnetSize -eq 'Medium') {
              $networkSuffix = '22'
            }
            if ($elzVnetSize -eq 'Large') {
              $networkSuffix = '21'
            }

            $faId = (Get-AzWebApp -Name $faIpamName -ResourceGroupName $faIpamRg).Id
            If ((Get-AzVirtualNetwork -name $elzVnetName -ResourceGroupName $elzVnetRg -ErrorAction SilentlyContinue) -eq $null) {
                Write-Host "VNet $elzVnetName does not already exist in subscription $subName"
                $registerFunctionKey = (Invoke-AzResourceAction -ResourceId "$faId/functions/RegisterAddressSpace" -Action listkeys -Force).default
                if ($ase) {
                  $uriRegister = 'https://' + $faIpamName + '.ase-' + $connSubName + '-' + $elzRegionId + '-ipam.p.azurewebsites.net/api/RegisterAddressSpace?code=' + $registerFunctionKey
                }
                else {
                  $uriRegister = 'https://' + $faIpamName + '.azurewebsites.net/api/RegisterAddressSpace?code=' + $registerFunctionKey
                }
                $body = @{
                    'InputObject' = @{
                        'ResourceGroup' = $elzVnetRg
                        'VirtualNetworkName' = $elzVnetName
                        'NetworkSuffix' = $networkSuffix
                    }
                } | ConvertTo-Json
                $params = @{
                    'Uri'         = $uriRegister
                    'Method'      = 'POST'
                    'ContentType' = 'application/json'
                    'Body'        = $Body
                }
                $Result = Invoke-RestMethod @params
                $elzVnetAddress = $Result.NetworkAddress
            }
            Else {
                Write-Host "VNet $elzVnetName already exists in subscription $subName"
                $vnet = Get-AzVirtualNetwork -name $elzVnetName -ResourceGroupName $elzVnetRg
                $elzVnetAddress = $vnet.AddressSpace.AddressPrefixes[0]
            }

            $vnetOctet1 = $elzVnetAddress.Split(".")[0]
            $vnetOctet2 = $elzVnetAddress.Split(".")[1]
            $vnetOctet3 = $elzVnetAddress.Split(".")[2]

            if ($elzVnetSize -eq 'Small') {
                $snetWeb = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".0/25"
                $snetApp = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".128/25"
                $snetDb = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".0/25"
                $snetCgTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".128/26"
                $snetEcsTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".192/26"
            }
            else {
                $snetWeb = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".0/24"
                $snetApp = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".0/24"
                $snetDb = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 2).ToString() + ".0/24"
                $snetCgTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 3).ToString() + ".0/25"
                $snetEcsTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 3).ToString() + ".128/25"
            }

            Write-Host "Deploying landing zone network resources"
            Get-AzResourceLock -ResourceGroupName $elzVnetRg | Remove-AzResourceLock -Force
            Start-Sleep 10
            $deploymentName = Get-Date -Format yyyyMMddHHmmss
            New-AzDeployment -Name $deploymentName -Location $elzRegionName -Verbose -TemplateFile ./elz/src/build/elz/elznw.bicep `
                -elzSubName $elzSubName `
                -elzRegionId $elzRegionId `
                -elzVnetName $elzVnetName `
                -elzVnetRg $elzVnetRg `
                -elzVnetAddress $elzVnetAddress `
                -elzNsgRg $elzNsgRg `
                -elzRegionName $elzRegionName `
                -snetWeb $snetWeb `
                -snetApp $snetApp `
                -snetDb $snetDb `
                -snetCgTool $snetCgTool `
                -snetEcsTool $snetEcsTool `
                -nwPolicyId $nwPolicyId  `
                -mgPolicyId $mgPolicyId 
            Start-Sleep 30

            Write-Host "Updating storage table"
            $updateFunctionKey = (Invoke-AzResourceAction -ResourceId "$faId/functions/UpdateAddressSpace" -Action listkeys -Force).default
            if ($ase) {
              $uriUpdate = 'https://' + $faIpamName + '.ase-' + $connSubName + '-' + $elzRegionId + '-ipam.p.azurewebsites.net/api/UpdateAddressSpace?code=' + $UpdateFunctionKey
            }
            else {
              $uriUpdate = 'https://' + $faIpamName + '.azurewebsites.net/api/UpdateAddressSpace?code=' + $UpdateFunctionKey
            }
            $params = @{
                'Uri'         = $uriUpdate
                'Method'      = 'GET'
            }
            $Result = Invoke-RestMethod @params
          azPSVersion: latest 

      - name: Deploy RBAC role assignments
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $elzSubName = '${{ github.event.inputs.cgsubname }}'
            $subName = 'Azure Landing Zone'  # Temporary for testing 
            #$subName = $elzSubName
            $subId = (Set-AzContext -SubscriptionName $subName).Subscription.Id

            $subScope = '/subscriptions/' + $subId
            foreach ($role in ('Owner','Contributor','Reader')) {
                $groupName = ('rbac-' + $elzSubName + '-' + $role).ToLower()
                Write-Host $groupName
                if ((Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Count -eq 0) {
                    Write-Host "Creating group" $groupName
                    $groupId = (New-AzADGroup -DisplayName $groupName -MailNickname $groupName).Id
                    Start-Sleep 5
                    Write-Host "Assigning role" $role
                    New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName $role
                }
                else {
                    foreach ($group in Get-AzADGroup | where {$_.DisplayName -eq $groupName}) {
                        Write-Host "Checking existing role assignment for group" $group.DisplayName
                        if ((Get-AzRoleAssignment -ObjectId $group.Id -Scope $subScope -RoleDefinitionName $role) -eq $null) {
                            Write-Host "Assigning role" $role "for existing group" $group.DisplayName
                            New-AzRoleAssignment -ObjectId $group.Id  -Scope $subScope -RoleDefinitionName $role
                        }
                    }
                }
            }
          azPSVersion: latest 
