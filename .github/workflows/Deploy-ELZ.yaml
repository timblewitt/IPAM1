# This workflow deploys Enterprise Landing Zone resources.
# It claims an IP address range with the IPAM function for a new VNet 

name: Deploy-ELZ

on:
  push:
    branches: [ none ]
  workflow_dispatch:
      inputs:
        elzsubname:
          type: string
          description: 'Landing zone subscription name'
          required: true
          default: 'zp0001'
        regionname:
          type: choice
          description: 'Azure region for deployment of resources'
          required: true
          default: 'uksouth'
          options:
            - "uksouth"
            - "ukwest"
        envname:
          type: choice
          description: 'Environment (Prod/Nonprod)'
          required: true
          default: 'Prod'
          options:
            - "Prod"
            - "Nonprod"
        elztype:
          type: choice
          description: 'Landing Zone Workload (Standard/AKS/AVD)'
          required: true
          default: 'Standard'
          options:
            - "Standard"
            - "AKS"
            - "AVD"
        networksize:
          type: choice
          description: 'Virtual network (VNet) size - S/M/L'
          required: true
          default: 'Small'
          options:
            - "Small"
            - "Medium"
            - "Large"

jobs:
  deploy-elz:
    runs-on: windows-latest #self-hosted
    steps:
      - name: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v2
      
      - name: Log on to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
          
      - name: Deploy ELZ Management Resources
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $elzSubName = '${{ github.event.inputs.elzsubname }}'
            $elzRegionName = '${{ github.event.inputs.regionname }}'  
            $elzType = '${{ github.event.inputs.elztype }}'

            switch ($elzRegionName) {
              "uksouth" {$elzRegionId = 'uks'}
              "ukwest" {$elzRegionId = 'ukw'}
            }
            $elzMonitorRg = "rg-$elzSubName-$elzRegionId-monitor"
            $elzBackupRg = "rg-$elzSubName-$elzRegionId-backup"
            $elzSecurityRg = "rg-$elzSubName-$elzRegionId-security"
            $elzAvdRg = "rg-$elzSubName-$elzRegionId-avd"

            $namingPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyDefinitions/Enforce naming convention'
            $namingPolicyName = 'Enforce Landing Zone Naming Convention'
            
            $subName = $elzSubName
            $subName = 'Azure Landing Zone'  # Temporary for testing 
            $subName = 'CBPVisual Studio Enterprise'  # Temporary for testing 
            $subId = (Set-AzContext -SubscriptionName $subName).Subscription.Id

            Write-Host "Removing existing naming convention policy"
            Get-AzPolicyAssignment | where {$_.Name -eq $namingPolicyName} | Remove-AzPolicyAssignment
            Start-Sleep 60

            Write-Host "Deploying landing zone management resources"
            $deploymentName = Get-Date -Format yyyyMMddHHmmss
            New-AzDeployment -Name $deploymentName -Location $elzRegionName -Verbose -TemplateFile ./elz/src/build/elz/elz.bicep `
              -elzSubName $elzSubName `
              -elzRegionId $elzRegionId `
              -elzRegionName $elzRegionName `
              -elzMonitorRg $elzMonitorRg `
              -elzBackupRg $elzBackupRg `
              -elzSecurityRg $elzSecurityRg `
              -elzAvdRg $elzAvdRg `
              -elzType $elzType `
              -namingPolicyId $namingPolicyId
          azPSVersion: latest 

      - name: Deploy ELZ Network Resources
        uses: azure/powershell@v1
        with:
          inlineScript: |            
            $elzSubName = '${{ github.event.inputs.elzsubname }}'
            $elzRegionName = '${{ github.event.inputs.regionname }}'  
            $elzEnvName = '${{ github.event.inputs.envname }}'  
            $elzType = '${{ github.event.inputs.elztype }}'
            $elzVnetSize  = '${{ github.event.inputs.networksize }}'  

            switch ($elzRegionName) {
              "uksouth" {$elzRegionId = 'uks'}
              "ukwest" {$elzRegionId = 'ukw'}
            }

            $ipamSubName = 'np0004'  # Name of connectivity (network) subscription
            $ipamRegionId = 'uks'  # Region identifier used in naming central network resources
            $ase = $false  # IPAM function deployed to an Application Service Environment ($true/$false)

            $nwPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyDefinitions/deploy_allowed_products_networks'
            $mgPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyAssignments/products_assignment'
            $lockPolicyId = '/providers/Microsoft.Management/managementGroups/Prod/providers/Microsoft.Authorization/policyDefinitions/deploy_read_only_lock'
            $lockAdminRoleId = '/providers/microsoft.authorization/roleDefinitions/c78dcaa7-875d-400c-9be4-51394eba0c71'
            $elzVnetName = "vnet-$elzSubName-$elzRegionId-01"
            $elzVnetRg = "rg-$elzSubName-$elzRegionId-network"
            $elzNsgRg = "rg-$elzSubName-$elzRegionId-nsg"

            $faIpamName = "fa-$ipamSubName-$ipamRegionId-ipam"
            $faIpamRg = "rg-$ipamSubName-$ipamRegionId-ipam"

            $subName = $elzSubName
            $subName = 'Azure Landing Zone'  # Temporary for testing 
            $subName = 'CBPVisual Studio Enterprise'  # Temporary for testing 
            Set-AzContext -SubscriptionName $subName

            $networkSuffix = '23'  # Small network by default
            if ($elzVnetSize -eq 'Medium') {
              $networkSuffix = '22'
            }
            if ($elzVnetSize -eq 'Large') {
              $networkSuffix = '21'
            }

            $faId = (Get-AzWebApp -Name $faIpamName -ResourceGroupName $faIpamRg).Id
            If ((Get-AzVirtualNetwork -name $elzVnetName -ResourceGroupName $elzVnetRg -ErrorAction SilentlyContinue) -eq $null) {
              Write-Host "VNet $elzVnetName does not already exist in subscription $subName"
              $registerFunctionKey = (Invoke-AzResourceAction -ResourceId "$faId/functions/RegisterAddressSpace" -Action listkeys -Force).default
              if ($ase) {
                $uriRegister = 'https://' + $faIpamName + '.ase-' + $ipamSubName + '-' + $ipamRegionId + '-ipam.p.azurewebsites.net/api/RegisterAddressSpace?code=' + $registerFunctionKey
              }
              else {
                $uriRegister = 'https://' + $faIpamName + '.azurewebsites.net/api/RegisterAddressSpace?code=' + $registerFunctionKey
              }
              Write-Host "URI: " $uriRegister
              Write-Host "NetworkSuffix: " $networkSuffix
              Write-Host "Environment: " $elzEnvName
              $body = @{
                'InputObject' = @{
                  'ResourceGroup' = $elzVnetRg
                  'VirtualNetworkName' = $elzVnetName
                  'NetworkSuffix' = $networkSuffix
                  'NwEnvironment' = $elzEnvName
                  'NwRegion' = $elzRegionName
                  }
              } | ConvertTo-Json
              Write-Host "Body: " $body
              $params = @{
                'Uri'         = $uriRegister
                'Method'      = 'POST'
                'ContentType' = 'application/json'
                'Body'        = $Body
              }
              $Result = Invoke-RestMethod @params -Verbose
              $elzVnetAddress = $Result.NetworkAddress
            }
            Else {
              Write-Host "VNet $elzVnetName already exists in subscription $subName"
              $vnet = Get-AzVirtualNetwork -name $elzVnetName -ResourceGroupName $elzVnetRg
              $elzVnetAddress = $vnet.AddressSpace.AddressPrefixes[0]
            }

            $vnetOctet1 = $elzVnetAddress.Split(".")[0]
            $vnetOctet2 = $elzVnetAddress.Split(".")[1]
            $vnetOctet3 = $elzVnetAddress.Split(".")[2]

            if ($elzVnetSize -eq 'Small') {
              $snetWeb = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".0/25"
              $snetApp = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".128/25"
              $snetDb = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".0/25"
              $snetCgTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".128/26"
              $snetEcsTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".192/26"
            }
            else {
              $snetWeb = $vnetOctet1 + "." + $vnetOctet2 + "." + $vnetOctet3 + ".0/24"
              $snetApp = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 1).ToString() + ".0/24"
              $snetDb = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 2).ToString() + ".0/24"
              $snetCgTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 3).ToString() + ".0/25"
              $snetEcsTool = $vnetOctet1 + "." + $vnetOctet2 + "." + ([int]$vnetOctet3 + 3).ToString() + ".128/25"
            }

            Write-Host "Deploying landing zone network resources"
            Write-Host "Removing existing resource locks"
            Get-AzResourceLock -ResourceGroupName $elzVnetRg | Remove-AzResourceLock -Force
            Start-Sleep 30
            if ((Get-AzResourceGroup | where {$_.ResourceGroupName -eq $elzVnetRg}).Count -gt 0) {   
              Write-Host "Removing existing role assignments"
              Get-AzRoleAssignment -ResourceGroupName $elzVnetRg | where {$_.RoleDefinitionName -eq 'Lock Administrator'} | Remove-AzRoleAssignment
              Write-Host "Removing existing policy assignments at resource group level"           
              $rgVnetId = (Get-AzResourceGroup -ResourceGroupName $elzVnetRg).ResourceId
              Get-AzPolicyAssignment -Scope $rgVnetId | where {$_.ResourceGroupName -eq $elzVnetRg} | Remove-AzPolicyAssignment
              Start-Sleep 30
            }
            $deploymentName = Get-Date -Format yyyyMMddHHmmss
            New-AzDeployment -Name $deploymentName -Location $elzRegionName -Verbose -TemplateFile ./elz/src/build/elz/elznw.bicep `
              -elzSubName $elzSubName `
              -elzRegionId $elzRegionId `
              -elzVnetName $elzVnetName `
              -elzVnetRg $elzVnetRg `
              -elzVnetAddress $elzVnetAddress `
              -elzNsgRg $elzNsgRg `
              -elzRegionName $elzRegionName `
              -snetWeb $snetWeb `
              -snetApp $snetApp `
              -snetDb $snetDb `
              -snetCgTool $snetCgTool `
              -snetEcsTool $snetEcsTool `
              -nwPolicyId $nwPolicyId  `
              -mgPolicyId $mgPolicyId `
              -lockPolicyId $lockPolicyId `
              -lockAdminRoleId $lockAdminRoleId
            Start-Sleep 60

            Write-Host "Updating storage table"
            $updateFunctionKey = (Invoke-AzResourceAction -ResourceId "$faId/functions/UpdateAddressSpace" -Action listkeys -Force).default
            if ($ase) {
              $uriUpdate = 'https://' + $faIpamName + '.ase-' + $ipamSubName + '-' + $ipamRegionId + '-ipam.p.azurewebsites.net/api/UpdateAddressSpace?code=' + $UpdateFunctionKey
            }
            else {
              $uriUpdate = 'https://' + $faIpamName + '.azurewebsites.net/api/UpdateAddressSpace?code=' + $UpdateFunctionKey
            }
            $params = @{
              'Uri'         = $uriUpdate
              'Method'      = 'GET'
            }
            $Result = Invoke-RestMethod @params
          azPSVersion: latest 

      - name: Deploy RBAC Role Assignments
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $elzSubName = '${{ github.event.inputs.elzsubname }}'
            $elzType = '${{ github.event.inputs.elztype }}'
            $elzRegionName = '${{ github.event.inputs.regionname }}'  

            switch ($elzRegionName) {
              "uksouth" {$elzRegionId = 'uks'}
              "ukwest" {$elzRegionId = 'ukw'}
            }

            $subName = $elzSubName
            $subName = 'Azure Landing Zone'  # Temporary for testing 
            $subName = 'CBPVisual Studio Enterprise'  # Temporary for testing 
            $subId = (Set-AzContext -SubscriptionName $subName).Subscription.Id
            $subScope = '/subscriptions/' + $subId

            Write-Host "Creating ELZ Infra Admins AAD group"            
            $groupName = ('elz-' + $elzSubName + '-infraadmins')
            Write-Host $groupName
            if ((Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Count -eq 0) {
              Write-Host "Creating group" $groupName
              $groupId = (New-AzADGroup -DisplayName $groupName -MailNickname $groupName).Id
              Start-Sleep 60
              Write-Host "Assigning roles for group" $groupName
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Contributor'
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Resource Policy Contributor'
            }

            Write-Host "Creating ELZ Workers AAD group"            
            $groupName = ('elz-' + $elzSubName + '-workers')
            Write-Host $groupName
            if ((Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Count -eq 0) {
              Write-Host "Creating group" $groupName
              $groupId = (New-AzADGroup -DisplayName $groupName -MailNickname $groupName).Id
              Start-Sleep 60
              Write-Host "Assigning roles for group" $groupName
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Virtual Machine Contributor'
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Storage Account Contributor'
            }

            Write-Host "Creating ELZ ReadOnly Users AAD group"            
            $groupName = ('elz-' + $elzSubName + '-readonlyusers')
            Write-Host $groupName
            if ((Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Count -eq 0) {
              Write-Host "Creating group" $groupName
              $groupId = (New-AzADGroup -DisplayName $groupName -MailNickname $groupName).Id
              Start-Sleep 60
              Write-Host "Assigning roles for group" $groupName
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Reader'
            }

            Write-Host "Creating ELZ Key Vault Consumers AAD group"            
            $groupName = ('elz-' + $elzSubName + '-keyvaultconsumers')
            Write-Host $groupName
            if ((Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Count -eq 0) {
              Write-Host "Creating group" $groupName
              $groupId = (New-AzADGroup -DisplayName $groupName -MailNickname $groupName).Id
              Start-Sleep 60
              Write-Host "Assigning roles for group" $groupName
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Key Vault Crypto User'
              New-AzRoleAssignment -ObjectId $groupId -Scope $subScope -RoleDefinitionName 'Key Vault Secrets User'
            }

            if ($elzType -eq 'AVD') {
              Write-Host "Creating ELZ AVD Admins AAD group"            
              $groupName = ('elz-' + $elzSubName + '-avdadmins')
              Write-Host $groupName
              $elzAvdRg = "rg-$elzSubName-$elzRegionId-avd"
              if ((Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Count -eq 0) {
                Write-Host "Creating group" $groupName
                $groupId = (New-AzADGroup -DisplayName $groupName -MailNickname $groupName).Id
              }
              else {
                Write-Host "Existing group" $groupName
                $groupId = (Get-AzADGroup | where {$_.DisplayName -eq $groupName}).Id
              }
              Start-Sleep 60
              Write-Host "Assigning roles for group" $groupName
              Write-Host "At level of resource group" $elzAvdRg
              $roleName = 'User Access Administrator'
              if ((Get-AzRoleAssignment -ObjectId $groupId -ResourceGroupName $elzAvdRg -RoleDefinitionName $roleName | where {$_.Scope -like "*$elzAvdRg"}).Count -eq 0) {
                Write-Host "Assigning role" $rolename              
                New-AzRoleAssignment -ObjectId $groupId -ResourceGroupName $elzAvdRg -RoleDefinitionName $roleName -Verbose
              }
              else {
                Write-Host "Role already assigned:" $roleName
              }
            }
          azPSVersion: latest 
